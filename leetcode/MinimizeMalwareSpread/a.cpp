/* Copyright (C) 2019 by iamslash */

#include <cstdio>
#include <vector>
#include <algorithm>

// 176ms 60.33% 27.9MB 81.40%
// O(N^2) O(N)
class Solution {
 private:
  std::vector<int> m_parent;  // parent
  std::vector<int> m_nodcnt;  // node count
  std::vector<int> m_malcnt;  // malware count
 public:
  int minMalwareSpread(
      std::vector<std::vector<int>>& G, std::vector<int>& I) {
    int H = G.size();
    int W = G[0].size();
    // set parent
    m_parent = std::vector<int>(H, 0);
    for (int i = 0; i < H; ++i)
      m_parent[i] = i;
    // set mal count
    m_malcnt = std::vector<int>(H, 0);
    for (int u : I)
      m_malcnt[u]++;
    // set node count 
    m_nodcnt  = std::vector<int>(H, 1);
    for (int y = 0; y < H; ++y) {
      for (int x = 0; x < W; ++x) {
        if (G[y][x])
          merge(y, x);
      }
    }

    std::sort(I.begin(), I.end());
    int maxu = I[0];
    int maxmalcnt = m_malcnt[find(maxu)];
    int maxnodcnt = m_nodcnt[find(maxu)];
    for (int u : I) {
      int p = find(u);
      // printf("%d, %d, nodcnt: %d, malcnt: %d\n", u, p, m_nodcnt[p], m_malcnt[p]);
      if ((m_malcnt[p] < maxmalcnt) ||
          (m_malcnt[p] == maxmalcnt && m_nodcnt[p] > maxnodcnt)) {
          maxu = u;
          maxmalcnt = m_malcnt[p];
          maxnodcnt = m_nodcnt[p];        
      }
    }
    return maxu;
  }
  int find(int u) {
    if (m_parent[u] == u)
      return u;
    return find(m_parent[u]);
  }
  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v)
      return;
    if (u < v)
      std::swap(u, v);
    m_parent[u] = v;
    m_nodcnt[v] += m_nodcnt[u];
    m_malcnt[v] += m_malcnt[u];
  }
};

int main() {

  std::vector<std::vector<int>> G = {
    {1,1,0},
    {1,1,0},
    {0,0,1}
  };
  std::vector<int> I = {0, 1}; // 0

  // std::vector<std::vector<int>> G = {
  //   {1,0,0,0},
  //   {0,1,0,0},
  //   {0,0,1,1},
  //   {0,0,1,1}
  // };
  // std::vector<int> I = {3, 1}; // 3

  // std::vector<std::vector<int>> G = {
  //   {1,0,0,0,0,0},
  //   {0,1,0,0,0,0},
  //   {0,0,1,0,0,0},
  //   {0,0,0,1,1,0},
  //   {0,0,0,1,1,0},
  //   {0,0,0,0,0,1}
  // };
  // std::vector<int> I = {5, 0}; // 0

  Solution sln;

  printf("%d\n", sln.minMalwareSpread(G, I));
  
  return 0;
}

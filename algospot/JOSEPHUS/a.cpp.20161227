// Copyright (C) 2016 by iamslash
// https://algospot.com/judge/problem/read/CHRISTMAS

#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <cstring>
#include <algorithm>
// #include <set>
#include <cmath>
#include <queue>
#include <cassert>
#include <cstdint>

int N, K;

void print_vector(const std::vector<int>& v) {
  printf("<-- ");
  for (int i = 0; i < v.size(); ++i) {
    printf("%d ", v[i]);
  }
  printf("-->\n");
}

void suicide(std::vector<int> * soldiers, int k) {
  int idx_to_kill = 0;  // 죽여야할 병사의 인덱스
  soldiers->erase(soldiers->begin());
  while (soldiers->size() > 2) {
    // idx_to_kill은 인덱스니까 k에서 1빼자.
    idx_to_kill += (k - 1);
    //
    if (idx_to_kill >= soldiers->size())
      idx_to_kill = idx_to_kill % soldiers->size();
    //
    // print_vector(*soldiers);
    // printf("%d\n", idx_to_kill);
    soldiers->erase(soldiers->begin() + idx_to_kill);
  }
  // printf("%lu\n", soldiers->size());
}

int main() {
  int T;  // number of T
  scanf("%d", &T);
  //
  for (int t = 0; t < T; ++t) {
    scanf("%d", &N);
    scanf("%d", &K);

    std::vector<int> soldiers(N);
    for (int i=0; i < N; i++) {
      soldiers[i] = i+1;
    }

    suicide(&soldiers, K);
    // print_vector(psum);
    printf("%d %d\n", soldiers[0], soldiers[1]);
  }
  return 0;
}
